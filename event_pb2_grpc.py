# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import event_pb2 as event__pb2


class EventLoggerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SendEvent = channel.unary_unary(
                '/EventLogger/SendEvent',
                request_serializer=event__pb2.EventRequest.SerializeToString,
                response_deserializer=event__pb2.EventReply.FromString,
                )
        self.SendEventStreamReply = channel.unary_stream(
                '/EventLogger/SendEventStreamReply',
                request_serializer=event__pb2.EventRequest.SerializeToString,
                response_deserializer=event__pb2.EventReply.FromString,
                )


class EventLoggerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def SendEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendEventStreamReply(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_EventLoggerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SendEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.SendEvent,
                    request_deserializer=event__pb2.EventRequest.FromString,
                    response_serializer=event__pb2.EventReply.SerializeToString,
            ),
            'SendEventStreamReply': grpc.unary_stream_rpc_method_handler(
                    servicer.SendEventStreamReply,
                    request_deserializer=event__pb2.EventRequest.FromString,
                    response_serializer=event__pb2.EventReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'EventLogger', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class EventLogger(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def SendEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/EventLogger/SendEvent',
            event__pb2.EventRequest.SerializeToString,
            event__pb2.EventReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendEventStreamReply(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/EventLogger/SendEventStreamReply',
            event__pb2.EventRequest.SerializeToString,
            event__pb2.EventReply.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
